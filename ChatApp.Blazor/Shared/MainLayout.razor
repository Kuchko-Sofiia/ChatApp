@using ChatApp.Blazor.Helpers;
@using ChatApp.Blazor.Pages.VideoCall;
@using ChatApp.Blazor.Services.Interfaces;
@using System.Security.Claims;

@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IAccountService AccountService
@inject IDialogService DialogService
@inject IUserService UserService
@inject ISnackbar Snackbar


<PageTitle>ChatApp.Blazor</PageTitle>

<div class="page">
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu />
            </div>
        </Authorized>
    </AuthorizeView>
    <main>
        <div class="top-row px-4" style="justify-content:space-between;">
            <h1 style="">ChatApp</h1>
            <AuthorizeView>
                <NotAuthorized>
                    <div style="display: flex">
                        <NavLink class="nav-link" href="login">
                            <a>Login</a>
                        </NavLink>
                        <NavLink class="nav-link" href="signin">
                            <a>Sign In</a>
                        </NavLink>
                    </div>
                </NotAuthorized>
                <Authorized>
                    <div style="display: flex; align-items:center;">
                        <span style="white-space: pre">Hello, </span>
                        <button onclick="@(() => NavigateToProfile())" Style="color: rgb(89, 74, 226)">
                            @context.User.Identity!.Name!
                        </button>
                        <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Primary">
                            <NavLink class="nav-link" href="changepassword">
                                <MudMenuItem>Change Password</MudMenuItem>
                            </NavLink>
                            <NavLink class="nav-link" href="/">
                                <MudMenuItem OnClick="Logout">Logout</MudMenuItem>
                            </NavLink>
                        </MudMenu>
                    </div>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            <CascadingValue Name="VideoChatHubConnection" Value="@HubConnection">
                 @Body
            </CascadingValue>
        </article>
    </main>
</div>
<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />

@code {
    private HubConnection? HubConnection;
    private AuthenticationState? _authState;
    private string _currentUserId = null!;
    private Snackbar snackbar;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUserId = _authState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value!;

        HubConnection = new HubConnectionBuilder()
        .WithUrl(NavigationManager.ToAbsoluteUri($"{Configuration.GetSection("AppBase").Value}videochathub?userId={_currentUserId}")).Build();

        HubConnection.On<string, string>("IncomingCall", async (callingUserId, peerId) =>
        {
            var user = await UserService.GetUserByIdAsync(callingUserId);

            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            snackbar = Snackbar.Add(
                @<div>
                    <h5>@user.UserName is calling</h5>
                    <ul>
                        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="() => DeclineCall(callingUserId)">
                            Decline
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Success" OnClick="() => AcceptCall(callingUserId, peerId)">
                            Accept
                        </MudButton>
                    </ul>
        </div>
    ,
                Severity.Normal,
                options =>
                {
                    options.IconColor = Color.Success;
                    options.SnackbarVariant = Variant.Outlined;
                    options.Icon = Icons.Material.Filled.PhoneCallback;
                    options.ShowCloseIcon = false;
                    options.CloseAfterNavigation = true;
                    options.VisibleStateDuration = 1000000;
                }
            );
        });

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
        StateHasChanged();
    }

    private async Task AcceptCall(string callingUserId, string peerId)
    {
        //NavigationManager.NavigateTo($"/video-chat/{callingUserId}?peerId={peerId}");

        var parameters = new DialogParameters();
        parameters.Add("Id", callingUserId);
        parameters.Add("peerId", peerId);
        parameters.Add("HubConnection", HubConnection);
        var dialog = await DialogService.ShowAsync<VideoChat>("", parameters, new DialogOptions
        {
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.ExtraLarge
        });
        if (snackbar is null) return;
            Snackbar.Remove(snackbar);
    }

    private async Task DeclineCall(string callingUserId)
    {
        await HubConnection.InvokeAsync("DeclineCall", callingUserId);

        if (snackbar is null) return;
        Snackbar.Remove(snackbar);
    }

    private async Task Logout()
    {
        await AccountService.Logout();
        NavigationManager.NavigateTo("/");
    }
    private async Task NavigateToProfile()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value!;
        NavigationManager.NavigateTo($"/users/details?userId={userId}");
    }
}