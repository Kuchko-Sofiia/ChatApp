@page "/users/edit-user"
@attribute [Authorize]

@using System.ComponentModel.DataAnnotations;
@using System.Net.Http.Json
@using ChatApp.DTO.Validators;
@using Microsoft.AspNetCore.WebUtilities;
@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO;

@inject NavigationManager NavigationManager
@inject IUserService UserService

<div class="d-flex justify-content-center justify-items-center">
    <MudGrid Style="max-width:800px">
        <MudItem xs="12" sm="7">
            <MudPaper Class="pa-4">
                <h3 class="mb-5">EditUser</h3>
                @if (_user != null)
                {
                    <MudCarousel Class="mud-width-full mb-3" @ref="_carousel" ItemsSource="_userAvatars" @bind-SelectedIndex="_selectedImageIndex" Style="height:250px;" ShowArrows="true" EnableSwipeGesture="true" ShowBullets="false" AutoCycle="false">
                        <ItemTemplate>
                            <div class="d-flex flex-column justify-center">
                                <MudCardMedia Image="@_userAvatars[_carousel!.SelectedIndex]" Height="250" />
                            </div>
                        </ItemTemplate>
                    </MudCarousel>
                    <div class="d-flex justify-content-end align-items-center mb-4">
                        <MudFileUpload Style="margin-top:0px" T="IBrowserFile" MaxFiles="1" FilesChanged="@((files) => AddImageAsync(files))">
                            <ButtonTemplate>
                                <MudFab HtmlTag="label" Color="Color.Primary" Size="Size.Small" StartIcon="@Icons.Material.Filled.Add" for="@context" />
                            </ButtonTemplate>
                        </MudFileUpload>
                        <MudFab HtmlTag="label" Color="Color.Error" Size="Size.Small" StartIcon="@Icons.Material.Filled.Delete" OnClick="@(() => RemoveImageAsync())" Style="margin-left:15px" />
                    </div>
                    <MudForm Model="@_user" @ref="_form" Validation="@(new UserDTOValidator().ValidateValue)" ValidationDelay="150">
                        <MudTextField Immediate="true" @bind-Value="_user.UserName" For="@(() => _user.UserName)" Label="UserName" InputType="InputType.Text" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-5" />
                        <MudTextField Immediate="true" @bind-Value="_user.Email" For="@(() => _user.Email)" Label="Email" InputType="InputType.Email" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-5" />
                        <MudTextField Immediate="true" @bind-Value="_user.FirstName" For="@(() => _user.FirstName)" Label="First Name" InputType="InputType.Text" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-5" />
                        <MudTextField Immediate="true" @bind-Value="_user.LastName" For="@(() => _user.LastName)" Label="Last Name" InputType="InputType.Text" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-5" />
                        <MudTextField Immediate="true" @bind-Value="_user.PhoneNumber" For="@(() => _user.PhoneNumber)" Label="PhoneNumber" InputType="InputType.Telephone" Variant="Variant.Outlined" Margin="Margin.Dense" Class="mb-5" />
                        <div class="d-flex mt-5">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OnBack())">Back</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await OnSaveChanges())">Save Changes</MudButton>
                        </div>
                    </MudForm>
                }
            </MudPaper>
        </MudItem>
    </MudGrid>
</div>

@code {
    private bool success;
    private string[]? _errors = { };
    private MudForm? _form;
    private MudCarousel<string>? _carousel;
    private int _selectedImageIndex;

    private IList<string> _userAvatars = new List<string>();
    private AvatarDTO _newAvatar = new AvatarDTO();
    private UserDTO _user = null!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            string id = QueryHelpers.ParseQuery(uri.Query)["userId"];

            _user = await UserService.GetUserByIdAsync(id);
            if (_user.Avatars != null)
            {
                foreach (var a in _user.Avatars)
                {
                    _userAvatars.Add(a.Content);
                }
            }
            StateHasChanged();
        }
    }

    private void OnBack()
    {
        NavigationManager.NavigateTo($"/users/details?userId={_user?.Id}");
    }

    private async Task OnSaveChanges()
    {
        await _form!.Validate();

        if (_form.IsValid)
        {
            await UserService.EditUserAsync(_user);
            NavigationManager.NavigateTo($"/users/details?userId={_user.Id}");
        }
    }

    private async Task AddImageAsync(IBrowserFile file)
    {
        using var stream = file.OpenReadStream(file.Size);
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        var contentBytes = ms.ToArray();
        var base64Content = $"data:{file.ContentType};base64,{Convert.ToBase64String(contentBytes)}";

        var avatar = new AvatarDTO
        {
            FileName = file.Name,
            ContentType = file.ContentType,
            Content = base64Content,
            UserId = _user?.Id
        };

        await UserService.AddAvatarAsync(avatar);

        _user = await UserService.GetUserByIdAsync(_user.Id);
        _userAvatars.Add(base64Content);
        _selectedImageIndex++;
        StateHasChanged();
    }

    private async Task RemoveImageAsync()
    {
        await UserService.RemoveAvatarAsync(_user.Avatars![_selectedImageIndex].Id);
        _userAvatars.RemoveAt(_selectedImageIndex);
        _selectedImageIndex--;
        StateHasChanged();
    }
}