@page "/users/details"
@attribute [Authorize]

@using System.Net.Http.Json
@using ChatApp.Blazor.Pages.VideoCall;
@using Microsoft.AspNetCore.WebUtilities;
@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject IUserService UserService
@inject IJSRuntime jsRuntime

<div class="d-flex justify-content-center">
    <MudCard Style="width: 400px;">
        @if (_userInfo?.Avatars != null && _userInfo?.Avatars.Count > 0)
        {
            <MudCardMedia Image="@_userInfo?.Avatars[^1].Content" Height="200" />
        }
        <MudCardContent>
            <MudText Typo="Typo.h5">@_userInfo?.FirstName @_userInfo?.LastName</MudText>
            <MudPaper Width="100%" Square="true">
                <MudList>
                    <MudListItem>
                        <MudIcon Icon="@Icons.Material.Filled.AlternateEmail" Color="Color.Primary" />
                        @_userInfo?.UserName
                    </MudListItem>
                    <MudDivider DividerType="DividerType.Inset" />
                    <MudListItem>
                        <MudIcon Icon="@Icons.Material.Filled.Email" Color="Color.Primary" />
                        @_userInfo?.Email
                    </MudListItem>
                    <MudDivider DividerType="DividerType.Inset" />
                    @if(!String.IsNullOrEmpty(_userInfo?.PhoneNumber))
                    {
                        <MudListItem>
                            <MudIcon Icon="@Icons.Material.Filled.PhoneAndroid" Color="Color.Primary" />
                            @_userInfo?.PhoneNumber
                        </MudListItem>
                    }
                </MudList>
            </MudPaper>
        </MudCardContent>
        <MudCardActions Class="d-flex justify-content-between">
            @if (_editEnabled)
            {
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="@(() => OnEdit())">Edit</MudButton>
            }
            else
            {
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => Call())">Call</MudButton>
            }
        </MudCardActions>
    </MudCard>
</div>

@code {
    [CascadingParameter(Name = "VideoChatHubConnection")]
    public HubConnection HubConnection { get; set; }

    private UserDTO? _userInfo;
    private bool _editEnabled;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
            string id = QueryHelpers.ParseQuery(uri.Query)["userId"];
            _userInfo = await UserService.GetUserByIdAsync(id);

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            _editEnabled = _userInfo?.Email == authState.User.Identity?.Name;

            StateHasChanged();
        }
    }

    private void OnEdit()
    {
        var uri = new Uri(NavigationManager.ToAbsoluteUri($"/users/edit-user?userId={_userInfo.Id}").ToString());
        NavigationManager.NavigateTo(uri.ToString());
    }
    private async Task Call()
    {
        var parameters = new DialogParameters();
        parameters.Add("Id", _userInfo.Id);
        parameters.Add("HubConnection", HubConnection);
        var dialog = await DialogService.ShowAsync<VideoChat>("", parameters, new DialogOptions
        {
            DisableBackdropClick = true,
            MaxWidth = MaxWidth.ExtraLarge
        });
    }
}
