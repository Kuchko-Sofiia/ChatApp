@page "/users"
@attribute [Authorize]

@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities;
@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO;

@inject NavigationManager NavigationManager
@inject IUserService UserService

<MudTable ServerData="@(new Func<TableState, Task<TableData<UserDTO>>>(ServerReload))"
          OnRowClick="RowClickEvent"
          T="UserDTO"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Users</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Avatar</MudTh>
        <MudTh><MudTableSortLabel SortLabel="UserName" T="UserDTO">UserName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Email" T="UserDTO">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="FirstName" T="UserDTO">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="LastName" T="UserDTO">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="DateOfBirth" T="UserDTO">Date Of Birth</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="UserDTO">Phone Number</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Avatar">
            @if (@context.Avatars != null && @context.Avatars.Count > 0)
            {
                <MudAvatar Color="Color.Secondary" Image="@context.Avatars[^1].Content" />
            }
            else
            {
                <MudAvatar Color="Color.Secondary">@context.UserName.Substring(0, 2).ToUpper()</MudAvatar>
            }
        </MudTd>
        <MudTd DataLabel="UserName">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.UserName"HighlightedText="@searchString"/>
        </MudTd>
        <MudTd DataLabel="Email">
            <MudHighlighter Class="mud-primary-text"Style="background-color:transparent;font-weight:bold;display:contents"Text="@context.Email" HighlightedText="@searchString"/>
        </MudTd>
        <MudTd DataLabel="First Name">
            <MudHighlighter Class="mud-primary-text"Style="background-color:transparent;font-weight:bold;display:contents"Text="@context.FirstName" HighlightedText="@searchString"/>
        </MudTd>
        <MudTd DataLabel="Last Name">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.LastName" HighlightedText="@searchString" />
        </MudTd>
        <MudTd DataLabel="Date Of Birth">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.DateOfBirth?.ToString("d")" HighlightedText="@searchString" />
        </MudTd>
        <MudTd DataLabel="Phone Number">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.PhoneNumber" HighlightedText="@searchString" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [CascadingParameter(Name = "VideoChatHubConnection")]
    public HubConnection HubConnection { get; set; }
    private IEnumerable<UserDTO>? _usersList;
    private MudTable<UserDTO>? table;

    private string? searchString = null;

    private async Task<TableData<UserDTO>> ServerReload(TableState state)
    {
        var paginatedData = await UserService.GetUsersAsync(GetTableState(state));

        IEnumerable<UserDTO> data = paginatedData.Items;
        _usersList = data;
        return new TableData<UserDTO>() { TotalItems = paginatedData.TotalItems, Items = _usersList };
    }

    private void RowClickEvent(TableRowClickEventArgs<UserDTO> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"/users/details?userId={tableRowClickEventArgs.Item.Id}");
    }

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }

    public PaginatedDataStateDTO<UserInfoSortProperty> GetTableState(TableState state)
    {
        return new PaginatedDataStateDTO<UserInfoSortProperty>()
            {
                PageIndex = state.Page + 1,
                PageSize = state.PageSize,
                SearchText = searchString,
                SortProperty = Enum.TryParse(state.SortLabel, out UserInfoSortProperty userInfoSortProperty) ? userInfoSortProperty : default,
                SortDirection = Enum.TryParse(state.SortDirection.ToString(), out SortDirectionData sortDirection) ? sortDirection : (SortDirectionData?)null
            };
    }

    private void GenerateUserNavigationUrl(TableState state)
    {
        var queryParams = new Dictionary<string, string?>();

        queryParams["page"] = state.Page.ToString();
        queryParams["pageSize"] = state.PageSize.ToString();

        if (!string.IsNullOrWhiteSpace(searchString))
            queryParams["searchString"] = searchString;

        if (state.SortLabel != null)
            queryParams["sortLabel"] = state.SortLabel.ToString();

        if (state.SortDirection != SortDirection.None)
            queryParams["orderBy"] = state.SortDirection.ToString();

        var url = QueryHelpers.AddQueryString("/users", queryParams);

        NavigationManager.NavigateTo(url);
    }

    private void SetTableStateFromQuery(TableState state)
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);

        if (query.ContainsKey("page") && int.TryParse(query["page"], out int page))
            state.Page = page;

        if (query.ContainsKey("pageSize") && int.TryParse(query["pageSize"], out int pageSize))
            state.PageSize = pageSize;

        if (query.ContainsKey("searchString"))
            searchString = query["searchString"].ToString();

        if (query.ContainsKey("sortLabel"))
            state.SortLabel = query["sortLabel"].ToString();

        if (query.ContainsKey("orderBy") && Enum.TryParse(query["orderBy"], out SortDirection sortDirection))
            state.SortDirection = sortDirection;
    }
}