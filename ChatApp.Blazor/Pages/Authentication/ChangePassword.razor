@page "/changepassword"
@attribute [Authorize]

@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO.Authentication;
@using ChatApp.DTO.Validators;

@inherits OwningComponentBase
@inject IAccountService AccountService

<div class="d-flex align-items-center" style="flex-direction:column;">
    <MudCard Class="p-4">
        <h3>Change Password</h3>
        <hr style="margin:0px" />
        <MudForm Model="@_changePasswordDto" @ref="@_form" Validation="@(new ChangePasswordDTOValidator().ValidateValue)" ValidationDelay="150" style="min-width:350px; width:500px">
            <MudCardContent>
                <MudTextField Immediate="true" @bind-Value="_changePasswordDto.Email" For="@(() => _changePasswordDto.Email)" Label="Email" />
                <MudTextField Immediate="true" @bind-Value="_changePasswordDto.CurrentPassword" For="@(() => _changePasswordDto.CurrentPassword)" Label="Password" InputType="InputType.Password" />
                <MudTextField Immediate="true" @bind-Value="_changePasswordDto.NewPassword" For="@(() => _changePasswordDto.NewPassword)" Label="New Password" InputType="InputType.Password" />
                <MudTextField Immediate="true" @bind-Value="_changePasswordDto.ConfirmNewPassword" For="@(() => _changePasswordDto.ConfirmNewPassword)" Label="Confirm New Password" InputType="InputType.Password" />
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await ChangePasswordAsync())">Change Password</MudButton>
        </MudCardActions>
    </MudCard>
</div>

@code {
    private MudForm _form = null!;
    private ChangePasswordDTO _changePasswordDto = new ChangePasswordDTO();

    private async Task ChangePasswordAsync()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            await AccountService.ChangePassword(_changePasswordDto);
            // TODO: Handle successful password change
        }
    }
}