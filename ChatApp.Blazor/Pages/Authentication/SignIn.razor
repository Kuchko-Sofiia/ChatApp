@page "/signin"

@using ChatApp.DTO.Authentication;
@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO.Validators;

@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<div class="d-flex align-items-center" style="flex-direction:column;">
    <MudCard Class="p-4">
        <h3>Sign In</h3>
        <hr style="margin:0px"/>
        <MudForm Model="@_signInDto" @ref="@_form" Validation="@(new SignInDTOValidator().ValidateValue)" ValidationDelay="150" style="min-width:350px; width:500px">
            <MudCardContent>
                <MudTextField Immediate="true" @bind-Value="_signInDto.UserName" For="@(() => _signInDto.UserName)" Label="UserName" />
                <MudTextField Immediate="true" @bind-Value="_signInDto.Email" For="@(() => _signInDto.Email)" Label="Email" />
                <MudTextField Immediate="true" @bind-Value="_signInDto.DateOfBirth" For="@(() => _signInDto.DateOfBirth)" Label="Date Of Birth" />
                <MudTextField Immediate="true" @bind-Value="_signInDto.Password" For="@(() => _signInDto.Password)" Label="Password" InputType="InputType.Password" />
                <MudTextField Immediate="true" @bind-Value="_signInDto.ConfirmPassword" For="@(() => _signInDto.ConfirmPassword)" Label="Confirm Password" InputType="InputType.Password" />
            </MudCardContent>
        </MudForm>
        <MudCardActions>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await SignInAsync())">Sign In</MudButton>
        </MudCardActions>
    </MudCard>
</div>

@code {
    private MudForm? _form;
    private SignInDTO _signInDto = new SignInDTO();

    private async Task SignInAsync()
    {
        await _form!.Validate();

        if (_form.IsValid)
        {
            await AccountService.SignIn(_signInDto);
            NavigationManager.NavigateTo("/login");
        }
    }
}