@page "/video-chat/{id}"

@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO;
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.JSInterop;
@using System.Security.Claims;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IChatService ChatService
@inject IJSRuntime jsRuntime

<h1>Video Call</h1>
<div style="display:flex; width:100%; justify-content: space-around;">
    <div style="display:flex; flex-direction:column; width: 350px; height:auto">
        <h3>Local video</h3>
        <video id="localVideo" autoplay="autoplay" muted="true"></video>
    </div>
    <div style="display:flex; flex-direction:column; width: 350px; height:auto">
        <h3>Remote video</h3>
        <video id="remoteVideo" autoplay="autoplay"></video>
    </div>
</div>
<MudButton @onclick="CallToUser">Call</MudButton>
<MudButton @onclick="HangUp">Hang up</MudButton>

@code {
    [Parameter] public string? Id { get; set; }
    [Parameter] public string? PeerId { get; set; }
    [Parameter] public HubConnection HubConnection { get; set; }
    [CascadingParameter]MudDialogInstance MudDialog { get; set; } = null!;
    
    private IJSObjectReference _videoChatModule = null!;
    private IJSObjectReference _localStream = null!;
    private string _currentPeerId = null!;
    private string _peerToCallId = null!;

    private AuthenticationState? _authState;
    private string _currentUserId = null!;

    protected override async Task OnInitializedAsync()
    {
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUserId = _authState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value!;
        _videoChatModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/video-chat.js");

        _currentPeerId = await _videoChatModule.InvokeAsync<string>("createNewPeer");
        _localStream = await _videoChatModule.InvokeAsync<IJSObjectReference>("setLocalStream");

        await _videoChatModule.InvokeVoidAsync("subscribePeerToCalls");

        if (PeerId != null)
        {
            _peerToCallId = PeerId;
            await AnswerCall();
        }

        await InitializeHubConnection();
        await InvokeAsync(StateHasChanged);
    }

    private async Task CallToUser()
    {
        await HubConnection.SendAsync("Call", _currentUserId, Id, _currentPeerId);
    }

    private async Task AnswerCall()
    {
        await _videoChatModule.InvokeVoidAsync("callToPeer", _localStream, _peerToCallId);
    }

    private async Task HangUp()
    {
        await HubConnection.SendAsync("HangUp", Id);
        await _videoChatModule.InvokeVoidAsync("endCall");
        MudDialog.Cancel();
    }

    private async Task InitializeHubConnection()
    {
        HubConnection.On("CallTerminated", async () =>
        {
            await _videoChatModule.InvokeVoidAsync("endCall");
            MudDialog.Cancel();
        });
        HubConnection.On("CallDeclined", async () =>
        {
            await _videoChatModule.InvokeVoidAsync("endCall");
            MudDialog.Cancel();
        });
    }
}