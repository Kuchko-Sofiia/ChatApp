@page "/chats/new"
@attribute [Authorize]

@using System.Net.Http.Json
@using ChatApp.DTO;
@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO.Validators;
@using System.Security.Claims;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IChatService ChatService
@inject IUserService UserService

<MudDialog Style="width: 500px">
    <TitleContent>
        <MudText Typo="Typo.h6" Сlass="mb-1">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3" />
            New chat:
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Model="@_chatDTO" @ref="_form" Validation="@(new ChatDTOValidator().ValidateValue)" ValidationDelay="150">
            <div class="pb-5">
                <MudTextField Immediate="true" @bind-Value="_chatDTO.Name" For="@(() => _chatDTO.Name)" Label="Name" />
                <MudTextField Immediate="true" @bind-Value="_chatDTO.Description" For="@(() => _chatDTO.Description)" Class="mt-3" Label="Description" />
            </div>
            <MudChipSet AllClosable="true" OnClose="RemoveUser">
                @foreach (var user in _selectedUsers)
                {
                    <MudChip Text="@user.Id">@user.FirstName @user.LastName</MudChip>
                }
            </MudChipSet>
            <MudTextField Label="Search" Class="mt-3" @bind-Value="_searchState.SearchText" DebounceInterval=500 OnDebounceIntervalElapsed="Search" />
            <MudList Clickable="true" Style="height:auto; max-height:250px; overflow:scroll">
                @foreach (var user in _paginatedUsers)
                {
                    <MudListItem OnClick="() => SelectUser(user)">@user.Email</MudListItem>
                }
            </MudList>
            <MudCardActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await CreateChatAsync())">
                    Create chat
                </MudButton>
            </MudCardActions>
        </MudForm>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = null!;

    private MudForm _form = null!;
    private ChatDTO _chatDTO = new ChatDTO()!;
    private UserDTO _currentUser = null!;
    private List<UserDTO> _selectedUsers = new();
    private List<UserDTO> _paginatedUsers = new();

    private PaginatedDataStateDTO<UserInfoSortProperty> _searchState = new()
    {
        PageIndex = 1,
        PageSize = 20,
        SearchText = String.Empty,
        SortDirection = SortDirectionData.None
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _currentUser = await GetCurrentUser();
            _selectedUsers.Add(_currentUser);
            StateHasChanged();
        }
    }

    private async Task CreateChatAsync()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            foreach (var user in _selectedUsers)
            {
                _chatDTO.MembersId?.Add(user.Id);
            }
            await ChatService.CreateNewChat(_chatDTO);

            MudDialog.Close(DialogResult.Ok(true));
        }
    }

    private async Task Search()
    {
        if (String.IsNullOrEmpty(_searchState.SearchText))
        {
            _paginatedUsers.Clear();
        }
        var paginatedData = await UserService.GetUsersAsync(_searchState);
        _paginatedUsers = paginatedData.Items;
    }

    private async Task<UserDTO> GetCurrentUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var id = authState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value!;

        return await UserService.GetUserByIdAsync(id);
    }

    private void SelectUser(UserDTO user)
    {
        if (!_selectedUsers.Contains(user))
            _selectedUsers.Add(user);
    }

    private void RemoveUser(MudChip chip)
    {
        var userId = chip.Text;
        if (userId ==_currentUser.Id)
            return;

        var userToRemove = _selectedUsers.FirstOrDefault(user => user.Id == userId);
        if (userToRemove != null)
            _selectedUsers.Remove(userToRemove);
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
