@page "/chats"
@attribute [Authorize]

@using System.Net.Http.Json
@using ChatApp.DTO;
@using ChatApp.Blazor.Services.Interfaces;

@inject NavigationManager NavigationManager
@inject IChatService ChatService
@inject IDialogService DialogService

<h3>Chats</h3>

<MudTable ServerData="@(new Func<TableState, Task<TableData<ChatDTO>>>(ServerReload))" OnRowClick="RowClickEvent" T="ChatDTO" Dense="true" Hover="true" @ref="_table">
    <ToolBarContent>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => CreateNewChat())">New chat</MudButton>
        <MudSpacer />
        <MudTextField T="string" 
                      ValueChanged="@(s=>OnSearchAsync(s))"
                      Placeholder="Search" 
                      Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" 
                      IconSize="Size.Medium" 
                      Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="Name" T="ChatDTO">Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Description" T="ChatDTO">Description</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="MembersCount" T="ChatDTO">Members</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Name">
            <MudHighlighter Class="mud-primary-text" 
                            Style="background-color:transparent;font-weight:bold;display:contents" 
                            Text="@context.Name" 
                            HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="Description">
            <MudHighlighter Class="mud-primary-text" 
                            Style="background-color:transparent;font-weight:bold;display:contents" 
                            Text="@context.Description" 
                            HighlightedText="@_searchString" />
        </MudTd>
        <MudTd DataLabel="MembersCount">
            <MudHighlighter Class="mud-primary-text" 
                            Style="background-color:transparent;font-weight:bold;display:contents" 
                            Text="@context.MembersCount.ToString()" 
                            HighlightedText="@_searchString" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<ChatDTO>? _chatsList;
    private MudTable<ChatDTO>? _table;
    private string? _searchString;

    private async Task<TableData<ChatDTO>> ServerReload(TableState state)
    {
        var paginatedData = await ChatService.GetChatsAsync(GetTableState(state));
        _chatsList = paginatedData.Items;

        return new TableData<ChatDTO>() { TotalItems = paginatedData.TotalItems, Items = _chatsList };
    }

    private void RowClickEvent(TableRowClickEventArgs<ChatDTO> tableRowClickEventArgs)
    {
        NavigationManager.NavigateTo($"/chats/{tableRowClickEventArgs.Item.Id}");
    }

    private async Task CreateNewChat()
    {
        var dialog = await DialogService.ShowAsync<CreateChat>("", new DialogOptions { DisableBackdropClick = true });
        var result = await dialog.Result;

        if (!result.Canceled)
            await _table!.ReloadServerData();
    }

    private async Task OnSearchAsync(string text)
    {
        _searchString = text;
        await _table!.ReloadServerData();
    }

    private PaginatedDataStateDTO<ChatSortProperty> GetTableState(TableState state)
    {
        Enum.TryParse(state.SortLabel, out ChatSortProperty chatSortProperty);
        Enum.TryParse(state.SortDirection.ToString(), out SortDirectionData sortDirection);

        return new PaginatedDataStateDTO<ChatSortProperty>
        {
            PageIndex = state.Page + 1,
            PageSize = state.PageSize,
            SearchText = _searchString,
            SortProperty = chatSortProperty,
            SortDirection = sortDirection,
        };
    }
}
