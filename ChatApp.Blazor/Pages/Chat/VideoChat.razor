@page "/video-chat/{id:int}"

@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO;
@using Microsoft.JSInterop;

@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IChatService ChatService
@inject IJSRuntime jsRuntime

<h1>Video Call</h1>
<p>@_peerId?</p>
<MudTextField @bind-Value="_peerToCallId"></MudTextField>
<MudButton @onclick="Call">Call</MudButton>
<div style="display:flex; width:100%; justify-content: space-around;">
    <div style="display:flex; flex-direction:column; width: 500px; height:450px">
        <h3>Local video</h3>
        <video id="localVideo" autoplay="autoplay"></video>
    </div>
    <div style="display:flex; flex-direction:column; width: 500px; height:450px">
        <h3>Remote video</h3>
        <video id="remoteVideo" autoplay="autoplay"></video>
    </div>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private HubConnection HubConnection = null!;
    private ChatDTO? _chat = new ChatDTO();

    private IJSObjectReference _videoChatModule = null!;
    private IJSObjectReference _localStream = null!;
    private IJSObjectReference _remoteStream = null!;
    private IJSObjectReference _peer = null!;
    private string _peerId = null!;
    private string _peerToCallId = null!;

    protected override async Task OnInitializedAsync()
    {
        _chat = await ChatService.GetChatAsync(Id);

        _videoChatModule = await jsRuntime.InvokeAsync<IJSObjectReference>("import", "./js/video-chat.js");

        _peerId = await _videoChatModule.InvokeAsync<string>("setUpPeer");
        //_peerId = await _videoChatModule.InvokeAsync<string>("getPeerId", _peer);
        //_peer = await _videoChatModule.InvokeAsync<IJSObjectReference>("subscribePeerToCalls", _peer);

        _localStream = await _videoChatModule.InvokeAsync<IJSObjectReference>("getLocalStream");
        await _videoChatModule.InvokeVoidAsync("setLocalStream", _localStream);

        await InvokeAsync(StateHasChanged);
        await InitializeHubConnection();
    }

    private async Task Call()
    {
        await _videoChatModule.InvokeVoidAsync("callToPeer", _localStream, _peerToCallId);
        await HubConnection.SendAsync("CallToUser", _chat.Id);
    }

    private async Task InitializeHubConnection()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{Configuration.GetSection("AppBase").Value}videochathub?roomId={_chat!.Id}"))
            .Build();
        
        HubConnection.On<int>("PeerJoined", async (connectionId) =>
        {
            //TODO: implement logic for adding new peer
            StateHasChanged();
        });

        HubConnection.On<int>("PeerLeft", async (connectionId) =>
        {
            //TODO: implement logic for removing peer
            StateHasChanged();
        });

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
    }
}