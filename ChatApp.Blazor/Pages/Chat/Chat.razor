@page "/chats/{id:int}"
@attribute [Authorize]

@using System.Security.Claims;
@using System.Net.Http.Json
@using Microsoft.AspNetCore.WebUtilities;
@using ChatApp.Blazor.Services.Interfaces;
@using ChatApp.DTO;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@inject IMessageService MessageService
@inject IChatService ChatService
@inject IUserService UserService

<div class="d-flex flex-grow-1 flex-row">
    <MudPaper Elevation="25" Class="py-4 flex-grow-1">
        <MudToolBar Dense="true">
            <MudIcon Icon="@Icons.Material.Outlined.ChatBubble" Style="margin-right:10px"></MudIcon>
            <MudText Typo="Typo.h6">@(_chat?.Name ?? "chat")</MudText>
                <MudButton OnClick="StartVideoCall" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Dark" ButtonType="ButtonType.Button">VideoCall</MudButton>
        </MudToolBar>
        <div class="d-flex flex-column-reverse p-4" style="max-height:65vh;min-height:65vh; overflow-y: auto;">
            @foreach (var message in _messages)
            {
                <div class="d-flex @((message.SenderId == _currentUserId) ? "flex-row" : "flex-row-reverse") my-4 align-content-start">
                    <div>
                        @if (message.Sender?.Avatars != null && message.Sender.Avatars.Count > 0)
                        {
                            <MudAvatar Color="Color.Primary" Style="height:45px; width:45px;">
                                <MudImage Src="@message.Sender.Avatars[^1].Content" />
                            </MudAvatar>
                        }
                        else
                        {
                            <MudAvatar Color="Color.Primary" Style="height:45px; width:45px;" Text="@($"{message.Sender?.FirstName?.Substring(0, 1)}{message.Sender?.LastName?.Substring(0, 1)}")" />
                        }
                    </div>
                    <div class="mx-2">
                        <MudText Typo="Typo.body1">@message.Sender?.FirstName @message.Sender?.LastName</MudText>
                        <MudText Typo="Typo.caption" Style="font-size: xx-small!important;">@message.SentTime.ToString("dd MMM, yyyy hh:mm tt")</MudText>
                        <MudText Typo="Typo.body2" Style=" padding: 10px;background-color: var(--mud-palette-background-grey);border-radius: 5px;margin-top:5px">@message.Text</MudText>
                    </div>
                </div>
            }
        </div>
        <MudPaper Elevation="25" Class="d-flex flex-row px-2 mx-4" Style="">
            <MudTextField T="string" Placeholder="Write a message..." DisableUnderLine="true" Class="mt-n2 mx-4" @bind-Value="_currentMessage.Text" />

            <MudButton OnClick="SendMessage" StartIcon="@Icons.Material.Outlined.Send" Color="Color.Dark" ButtonType="ButtonType.Button">Send</MudButton>
        </MudPaper>
    </MudPaper>
</div>

@code {
    [Parameter] public int Id { get; set; }
    private HubConnection HubConnection = null;

    private AuthenticationState? _authState;
    private UserDTO _currentUser = new UserDTO();
    private string _currentUserId = null!;

    private ChatDTO? _chat = new ChatDTO();
    private MessageDTO _currentMessage = new MessageDTO();
    private List<MessageDTO> _messages = new List<MessageDTO>();

    protected override async Task OnInitializedAsync()
    {
        _chat = await ChatService.GetChatAsync(Id);
        _messages = await MessageService.GetAllMessagesAsync(Id);

        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _currentUserId = _authState.User.Claims.FirstOrDefault(c => c.Type.Equals(ClaimTypes.NameIdentifier))?.Value!;
        _currentUser = await UserService.GetUserByIdAsync(_currentUserId);

        await InitializeHubConnection();
    }

    private async Task SendMessage()
    {
        if (!String.IsNullOrEmpty(_currentMessage.Text))
        {
            _currentMessage.ChatId = _chat!.Id;
            _currentMessage.SentTime = DateTime.UtcNow;
            _currentMessage.SenderId = _currentUserId;

            await MessageService.CreateNewMessage(_currentMessage);

            await HubConnection.SendAsync("SendNewMessageAsync", _chat.Id, _currentMessage);

            _currentMessage.Text = String.Empty;
        }
    }
    private async Task StartVideoCall()
    {
        NavigationManager.NavigateTo($"/video-chat/{_chat.Id}");
    }

    private async Task InitializeHubConnection()
    {
        HubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"{Configuration.GetSection("AppBase").Value}chathub?chatId={_chat!.Id}")).Build();

        HubConnection.On<MessageDTO>("ReceiveMessage", async (message) =>
        {
            message.Sender = await UserService.GetUserByIdAsync(message.SenderId);
            _messages.Insert(0, message);
            StateHasChanged();
        });

        if (HubConnection.State == HubConnectionState.Disconnected)
        {
            await HubConnection.StartAsync();
        }
    }
}
