@page "/allusers"
@using System.Net.Http.Json
@using ChatApp.DTO;
@using ChatApp.Blazor.Services.Interfaces;
@inject IUserService UserService
@inject NavigationManager NavigationManager

<MudTable ServerData="@(new Func<TableState, Task<TableData<UserInfoDTO>>>(ServerReload))"
          Dense="true" Hover="true" @ref="table">
    <ToolBarContent>
        <MudText Typo="Typo.h6">All Users</MudText>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="UserName" T="UserInfoDTO">UserName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="Email" T="UserInfoDTO">Email</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="FirstName" T="UserInfoDTO">First Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="LastName" T="UserInfoDTO">Last Name</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortLabel="PhoneNumber" T="UserInfoDTO">Phone Number</MudTableSortLabel></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="UserName">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.UserName"HighlightedText="@searchString"/>
        </MudTd>
        <MudTd DataLabel="Email">
            <MudHighlighter Class="mud-primary-text"Style="background-color:transparent;font-weight:bold;display:contents"Text="@context.Email" HighlightedText="@searchString"/>
        </MudTd>
        <MudTd DataLabel="First Name">
            <MudHighlighter Class="mud-primary-text"Style="background-color:transparent;font-weight:bold;display:contents"Text="@context.FirstName" HighlightedText="@searchString"/>
        </MudTd>
        <MudTd DataLabel="Last Name">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.LastName" HighlightedText="@searchString" />
        </MudTd>
        <MudTd DataLabel="Phone Number">
            <MudHighlighter Class="mud-primary-text" Style="background-color:transparent;font-weight:bold;display:contents" Text="@context.PhoneNumber" HighlightedText="@searchString" />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<UserInfoDTO>? _usersList;
    private MudTable<UserInfoDTO>? table;

    private int totalItems;
    private string? searchString = null;

    public TableStateData<UserInfoSortProperty> GetTableState(TableState state)
    {
        return new TableStateData<UserInfoSortProperty>()
        {
            PageIndex = state.Page + 1,
            PageSize = state.PageSize,
            SearchText = searchString,
            SortProperty = Enum.TryParse(state.SortLabel, out UserInfoSortProperty userInfoSortProperty) ? userInfoSortProperty : default,
            SortDirection = Enum.TryParse(state.SortDirection.ToString(), out SortDirectionData sortDirection) ? sortDirection : (SortDirectionData?)null
        };
    }

    private async Task<TableData<UserInfoDTO>> ServerReload(TableState state)
    {
        var paginatedData = await UserService.GetUsersAsync(GetTableState(state));
        IEnumerable<UserInfoDTO> data = paginatedData.Items;
        _usersList = data;
        return new TableData<UserInfoDTO>() { TotalItems = paginatedData.TotalItems, Items = _usersList };
    }

    //private string RowClickHandler(UserInfoDTO userInfoDTO, int index)
    //{
    //    NavigationManager.NavigateTo($"/userdetail?id={userInfoDTO.Id}");
    //    return string.Empty;
    //}

    private void OnSearch(string text)
    {
        searchString = text;
        table?.ReloadServerData();
    }
}