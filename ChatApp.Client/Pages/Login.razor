@page "/login"
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using System.ComponentModel.DataAnnotations

<h1>Login</h1>

@if (ErrorMessage != null)
{
    <p style="color: red">@ErrorMessage</p>
}

<EditForm Model="@Model" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="username">Username:</label>
        <InputText id="username" class="form-control" @bind-Value="@Model.Username" />
        <ValidationMessage For="@(() => Model.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Password:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="@Model.Password" />
        <ValidationMessage For="@(() => Model.Password)" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>
</EditForm>

@code {
    private LoginModel Model { get; set; } = new LoginModel();
    private string ErrorMessage { get; set; }

    private async Task HandleValidSubmit()
    {
        var result = await AuthStateProvider.GetAuthenticationStateAsync();
        if (result.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            ErrorMessage = "Invalid username or password";
        }
    }

    public class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Password is required")]
        public string Password { get; set; }
    }
}